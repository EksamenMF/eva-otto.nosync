---
import Layout from "../layouts/Layout.astro";
---

<head>
  <link
    rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
  />
</head>
<body>
  <div class="event-container">
    <div class="wrapper">
      <header>
        <p class="current-date"></p>
        <div class="icons">
          <span id="prev" class="material-symbols-rounded">chevron_left</span>
          <span id="next" class="material-symbols-rounded">chevron_right</span>
        </div>
      </header>
      <div class="calendar">
        <ul class="weeks">
          <li>Søn</li>
          <li>Man</li>
          <li>Tir</li>
          <li>Ons</li>
          <li>Tor</li>
          <li>Fre</li>
          <li>Lør</li>
        </ul>
        <ul class="days"></ul>
      </div>
    </div>
    <script>
      console.log("Script running");
      /* Finder elementet med klassen .days (listen, hvor dagene vises). */
      /*  Finder elementet med klassen .current-date (overskriften med måned og år). */
      /* Finder begge <span>-elementer med klassen .icons, som bruges til at gå til forrige/næste måned. */

      const daysTag = document.querySelector(".days") as HTMLElement | null;
      const currentDate = document.querySelector(
        ".current-date"
      ) as HTMLElement | null;
      const prevNextIcon = document.querySelectorAll(".icons span");

      /*  Starter med dagens dato (new Date()). */
      /* Gemmer det aktuelle år (f.eks. 2024). */
      /* Gemmer den aktuelle måned som et tal (f.eks. januar = 0, december = 11). */

      let date = new Date(),
        currYear = date.getFullYear(),
        currMonth = date.getMonth();

      /* En liste over alle månedsnavne, så vi kan vise dem i stedet for kun tal. */
      const months = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ];

      /* Tjekker, om de nødvendige HTML-elementer (daysTag og currentDate) findes. Hvis ikke, logges en fejl, og funktionen stopper. */
      const renderCalendar = () => {
        if (!daysTag || !currentDate) {
          console.error("Required DOM elements not found.");
          return;
        }

        /* Finder ugedagen for den første dag i måneden (f.eks. søndag = 0, mandag = 1). */
        /* Finder den sidste dato i måneden (f.eks. 31 for januar, 28/29 for februar). */
        /* Finder ugedagen for den sidste dag i måneden. */
        /* Finder den sidste dato i måneden før (f.eks. 31 for december, hvis måneden er januar). */

        let firstDayofMonth = new Date(currYear, currMonth, 1).getDay(),
          lastDateofMonth = new Date(currYear, currMonth + 1, 0).getDate(),
          lastDayofMonth = new Date(
            currYear,
            currMonth,
            lastDateofMonth
          ).getDay(),
          lastDateofLastMonth = new Date(currYear, currMonth, 0).getDate();

        /* <li>-elementer for de dage fra den forrige måned, der skal vises i starten af kalenderen. */
        /* inactive klassen bruges til at style dem anderledes. */
        let liTag = "";

        for (let i = firstDayofMonth; i > 0; i--) {
          liTag += `<li class="inactive">${lastDateofLastMonth - i + 1}</li>`;
        }

        /* Går fra dag 1 til den sidste dag i den aktuelle måned.  */
        /* Hvis en dag er "i dag", får den klassen active. */
        /* Tilføjer en <li> for hver dag i måneden. */
        for (let i = 1; i <= lastDateofMonth; i++) {
          let isToday =
            i === date.getDate() &&
            currMonth === new Date().getMonth() &&
            currYear === new Date().getFullYear()
              ? "active"
              : "";
          liTag += `<li class="${isToday}">${i}</li>`;
        }

        /* Tilføjer <li>-elementer for de dage fra næste måned, der skal vises i slutningen af kalenderen. */

        for (let i = lastDayofMonth; i < 6; i++) {
          liTag += `<li class="inactive">${i - lastDayofMonth + 1}</li>`;
        }

        /* Viser den aktuelle måned og år i overskriften. */
        /* Indsætter alle <li>-elementer i daysTag. */
        currentDate.innerText = `${months[currMonth]} ${currYear}`;
        daysTag.innerHTML = liTag;
      };

      /* Lytter efter klik for ikonerne. */
      /* Hvis brugeren klikker på "prev", går den til forrige måned. */
      /* Hvis brugeren klikker på "next", går den til næste måned. */

      /* Hvis måneden går under 0 (januar) eller over 11 (december), opdateres året: */
      /* Forrige måned: Gå til december sidste år. */
      /* Næste måned: Gå til januar næste år. */

      /* Til sidst kaldes renderCalendar() for at opdatere kalenderen. */

      renderCalendar();

      prevNextIcon.forEach((icon) => {
        icon.addEventListener("click", () => {
          currMonth = icon.id === "prev" ? currMonth - 1 : currMonth + 1;

          if (currMonth < 0 || currMonth > 11) {
            date = new Date(currYear, currMonth, new Date().getDate());
            currYear = date.getFullYear();
            currMonth = date.getMonth();
          } else {
            date = new Date();
          }
          renderCalendar();
        });
      });
    </script>
  </div>
</body>
