---
import Layout from "../layouts/Layout.astro";
---

<head>
  <link
    rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
  />
</head>
<body>
  <div class="wrapper">
    <header>
      <p class="current-date"></p>
      <div class="icons">
        <span id="prev" class="material-symbols-rounded">chevron_left</span>
        <span id="next" class="material-symbols-rounded">chevron_right</span>
      </div>
    </header>
    <div class="calendar">
      <ul class="weeks">
        <li>Søn</li>
        <li>Man</li>
        <li>Tir</li>
        <li>Ons</li>
        <li>Tor</li>
        <li>Fre</li>
        <li>Lør</li>
      </ul>
      <ul class="days"></ul>
    </div>
  </div>
</body>
<script>
  const daysTag = document.querySelector(
    ".days"
  ) as HTMLElement | null; /* Finder elementet med klassen .days (listen, hvor dagene vises). */
  const currentDate = document.querySelector(
    ".current-date"
  ) as HTMLElement | null; /*  Finder elementet med klassen .current-date (overskriften med måned og år). */
  const prevNextIcon =
    document.querySelectorAll(
      ".icons span"
    ); /* Finder begge <span>-elementer med klassen .icons, som bruges til at gå til forrige/næste måned. */

  let date = new Date() /*  Starter med dagens dato (new Date()). */,
    currYear = date.getFullYear() /* Gemmer det aktuelle år (f.eks. 2024). */,
    currMonth =
      date.getMonth(); /* Gemmer den aktuelle måned som et tal (f.eks. januar = 0, december = 11). */

  /* En liste over alle månedsnavne, så vi kan vise dem i stedet for kun tal. */
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  /* Tjekker, om de nødvendige HTML-elementer (daysTag og currentDate) findes. Hvis ikke, logges en fejl, og funktionen stopper. */
  const renderCalendar = () => {
    if (!daysTag || !currentDate) {
      console.error("Required DOM elements not found.");
      return;
    }

    /* Finder ugedagen for den første dag i måneden (f.eks. søndag = 0, mandag = 1). */
    /* Finder den sidste dato i måneden (f.eks. 31 for januar, 28/29 for februar). */
    /* Finder ugedagen for den sidste dag i måneden. */
    /* Finder den sidste dato i måneden før (f.eks. 31 for december, hvis måneden er januar). */

    let firstDayofMonth = new Date(currYear, currMonth, 1).getDay(),
      lastDateofMonth = new Date(currYear, currMonth + 1, 0).getDate(),
      lastDayofMonth = new Date(currYear, currMonth, lastDateofMonth).getDay(),
      lastDateofLastMonth = new Date(currYear, currMonth, 0).getDate();

    let liTag = "";

    for (let i = firstDayofMonth; i > 0; i--) {
      liTag += `<li class="inactive">${lastDateofLastMonth - i + 1}</li>`;
    }

    for (let i = 1; i <= lastDateofMonth; i++) {
      let isToday =
        i === date.getDate() &&
        currMonth === new Date().getMonth() &&
        currYear === new Date().getFullYear()
          ? "active"
          : "";
      liTag += `<li class="${isToday}">${i}</li>`;
    }

    for (let i = lastDayofMonth; i < 6; i++) {
      liTag += `<li class="inactive">${i - lastDayofMonth + 1}</li>`;
    }

    currentDate.innerText = `${months[currMonth]} ${currYear}`;
    daysTag.innerHTML = liTag;
  };

  renderCalendar();

  prevNextIcon.forEach((icon) => {
    icon.addEventListener("click", () => {
      currMonth = icon.id === "prev" ? currMonth - 1 : currMonth + 1;

      if (currMonth < 0 || currMonth > 11) {
        date = new Date(currYear, currMonth, new Date().getDate());
        currYear = date.getFullYear();
        currMonth = date.getMonth();
      } else {
        date = new Date();
      }
      renderCalendar();
    });
  });
</script>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Poppins", sans-serif;
  }
  body {
    display: flex;
    align-items: center;
    padding: 0 10px;
    justify-content: center;
    min-height: 100vh;
    background: #9b59b6;
  }
  .wrapper {
    width: 450px;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.12);
  }
  .wrapper header {
    display: flex;
    align-items: center;
    padding: 25px 30px 10px;
    justify-content: space-between;
  }
  header .icons {
    display: flex;
  }
  header .icons span {
    height: 38px;
    width: 38px;
    margin: 0 1px;
    cursor: pointer;
    color: #878787;
    text-align: center;
    line-height: 38px;
    font-size: 1.9rem;
    user-select: none;
    border-radius: 50%;
  }
  .icons span:last-child {
    margin-right: -10px;
  }
  header .icons span:hover {
    background: #f2f2f2;
  }
  header .current-date {
    font-size: 1.45rem;
    font-weight: 500;
  }
  .calendar {
    padding: 40px;
  }
  .calendar ul {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 20px;
    list-style: none;
    text-align: left;
  }
  .calendar .days {
    margin-bottom: 20px;
  }
  .calendar li {
    color: #333;
    font-size: 1.07rem;
    position: relative;
    min-height: 50px;
    line-height: 50px;
  }
  .calendar .weeks li {
    font-weight: 500;
    cursor: default;
  }
  .calendar .days li {
    z-index: 1;
    cursor: pointer;
    position: relative;
    margin-top: 30px;
  }
  .days li.inactive {
    color: #aaa;
  }
  .days li.active {
    color: #1720bc;
  }
  .days li::before {
    position: absolute;
    content: "";
    left: 50%;
    top: 50%;
    height: 35px;
    width: 35px;
    z-index: -1;
    border-radius: 50%;
    transform: translate(-50%, -50%);
  }
  .days li.active::before {
    background: #9b59b6;
  }
  .days li:not(.active):hover::before {
    background: #f2f2f2;
  }
</style>
